# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2
jobs:
  build:
    working_directory: ~/feragusper/BuenosAiresAntesYDespues
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      ADB_INSTALL_TIMEOUT: '10'
      GRADLE_OPTS: -Dorg.gradle.daemon=false
    # In CircleCI 1.0 we used a pre-configured image with a large number of languages and other packages.
    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # We have selected a pre-built image that mirrors the build environment we use on
    # the 1.0 platform, but we recommend you choose an image more tailored to the needs
    # of each job. For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
      - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
        command: /sbin/init
    steps:
      # Machine Setup
      #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
      # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
      - checkout
      # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
      # In many cases you can simplify this from what is generated here.
      # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      # This is based on your 1.0 configuration file or project settings
      - run:
          working_directory: ~/feragusper/BuenosAiresAntesYDespues
          command: sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0/bin/java; sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0/bin/javac; echo -e "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0" >> $BASH_ENV
      # Dependencies
      #   This would typically go in either a build or a build-and-test job when using workflows
      # Restore the dependency cache
      - restore_cache:
          keys:
            # This branch if available
            - v1-dep-{{ .Branch }}-
            # Default branch if not
            - v1-dep-master-
            # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
            - v1-dep-
      # This is based on your 1.0 configuration file or project settings
      - run: |-
          chmod +x gradlew

          wget --no-check-certificate  'https://drive.google.com/uc?export=download&id=0B_9goqUbxnddYVQwTVBSTHZXamM' -O presentation/src/main/res/values/google_maps_api.xml

          wget --no-check-certificate  'https://drive.google.com/uc?export=download&id=0B_9goqUbxndddGZZd2tBUEhqeDA' -O buildsystem/release.keystore

          wget --no-check-certificate  'https://drive.google.com/uc?export=download&id=0B_9goqUbxnddQmdUcksxNkRNaDg' -O buildsystem/playstore_deploy_keys.json

          wget --no-check-certificate  'https://drive.google.com/uc?export=download&id=0B_9goqUbxnddWVRDa3BTaDY0N1U' -O buildsystem/extension.gradle

          wget --no-check-certificate  'https://drive.google.com/uc?export=download&id=0B_9goqUbxnddeExzNEV3Q1RDV0U' -O presentation/google-services.json
      # This is based on your 1.0 configuration file or project settings
      - run: echo y | android list sdk
      - run: echo y | android update sdk --no-ui --all --filter "tools"
      - run: echo y | android update sdk --no-ui --all --filter "platform-tools"
      - run: echo y | android update sdk --no-ui --all --filter "build-tools-25.0.0"
      - run: echo y | android update sdk --no-ui --all --filter "android-26"
      - run: echo y | android update sdk --no-ui --all --filter "extra-google-m2repository"
      - run: echo y | android update sdk --no-ui --all --filter "extra-google-google_play_services"
      - run: echo y | android update sdk --no-ui --all --filter "extra-android-support"
      - run: echo y | android update sdk --no-ui --all --filter "extra-android-m2repository"
      # Save dependency cache
      - save_cache:
          key: v1-dep-{{ .Branch }}-{{ epoch }}
          paths:
            # This is a broad list of cache paths to include many possible development environments
            # You can probably delete some of these entries
            - vendor/bundle
            - ~/virtualenvs
            - ~/.m2
            - ~/.ivy2
            - ~/.bundle
            - ~/.go_workspace
            - ~/.gradle
            - ~/.cache/bower
            # These cache paths were specified in the 1.0 config
            - ~/.android
      # Compile
      #   This would typically go in either a build or a build-and-test job when using workflows
      # This is based on your 1.0 configuration file or project settings
      - run: ./gradlew assemble -PdisablePreDex
      # Test
      #   This would typically be a build job when using workflows, possibly combined with build
      # This is based on your 1.0 configuration file or project settings
      - run: ./gradlew test
      - run: ./gradlew lint
      - run:
          command: emulator -avd circleci-android22 -no-audio -no-window
          background: true
      - run: circle-android wait-for-boot
      - run: sleep 30
      - run: adb shell input keyevent 82
      - run: ./gradlew connectedAndroidTest -PdisablePreDex
      # Deployment
      # Your existing circle.yml file contains deployment steps.
      # The config translation tool does not support translating deployment steps
      # since deployment in CircleCI 2.0 are better handled through workflows.
      # See the documentation for more information https://circleci.com/docs/2.0/workflows/
      # Teardown
      #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
      # Save test results
      - store_test_results:
          path: /tmp/circleci-test-results
      # Save artifacts
      - store_artifacts:
          path: /tmp/circleci-artifacts
      - store_artifacts:
          path: /tmp/circleci-test-results
